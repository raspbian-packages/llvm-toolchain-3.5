.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH CLANG-TIDY "1" "October 2016" "clang-tidy 3.5" "User Commands"
.SH NAME
clang-tidy \- manual page for clang-tidy 3.5
.SH DESCRIPTION
USAGE: clang\-tidy [options] <source0> [... <sourceN>]
.PP
OPTIONS:
.PP
General options:
.HP
\fB\-help\fR                    \- Display available options (\fB\-help\-hidden\fR for more)
.HP
\fB\-help\-list\fR               \- Display list of available options (\fB\-help\-list\-hidden\fR for more)
.HP
\fB\-version\fR                 \- Display the version of this program
.PP
clang\-tidy options:
.TP
\fB\-analyze\-temporary\-dtors\fR \- Enable temporary destructor\-aware analysis in
clang\-analyzer\- checks.
.TP
\fB\-checks=\fR<string>         \- Comma\-separated list of globs with optional '\-'
prefix. Globs are processed in order of appearance
in the list. Globs without '\-' prefix add checks
with matching names to the set, globs with the '\-'
prefix remove checks with matching names from the
set of enabled checks.
.HP
\fB\-fix\fR                     \- Fix detected errors if possible.
.TP
\fB\-header\-filter=\fR<string>  \- Regular expression matching the names of the
headers to output diagnostics from. Diagnostics
from the main file of each translation unit are
always displayed.
Can be used together with \fB\-line\-filter\fR.
.TP
\fB\-line\-filter=\fR<string>    \- List of files with line ranges to filter the
warnings. Can be used together with
\fB\-header\-filter\fR. The format of the list is a JSON
array of objects:
.TP
[
{"name":"file1.cpp","lines":[[1,3],[5,7]]},
{"name":"file2.h"}
.IP
]
.TP
\fB\-list\-checks\fR             \- List all enabled checks and exit. Use with
\fB\-checks=\fR'*' to list all available checks.
.HP
\fB\-p=\fR<string>              \- Build path
.PP
\fB\-p\fR <build\-path> is used to read a compile command database.
.IP
For example, it can be a CMake build directory in which a file named
compile_commands.json exists (use \fB\-DCMAKE_EXPORT_COMPILE_COMMANDS\fR=\fI\,ON\/\fR
CMake option to get this output). When no build path is specified,
a search for compile_commands.json will be attempted through all
parent paths of the first input file . See:
http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html for an
example of setting up Clang Tooling on a source tree.
.PP
<source0> ... specify the paths of source files. These paths are
.IP
looked up in the compile command database. If the path of a file is
absolute, it needs to point into CMake's source tree. If the path is
relative, the current working directory needs to be in the CMake
source tree and the file must be in a subdirectory of the current
working directory. "./" prefixes in the relative files will be
automatically removed, but the rest of a relative path must be a
suffix of a path in the compile command database.
.SH "SEE ALSO"
The full documentation for
.B clang-tidy
is maintained as a Texinfo manual.  If the
.B info
and
.B clang-tidy
programs are properly installed at your site, the command
.IP
.B info clang-tidy
.PP
should give you access to the complete manual.
